[uwsgi]

uid=www-data
gid=www-data

project=plan_5x5x5
base=/home/ubuntu

chdir=%(base)/%(project)
module=%(project).wsgi:application


# static-map=/static=static

master=true
processes=1


# 以下uwsgi与nginx通信手段3选一即可


# 选项1, 使用unix socket与nginx通信，仅限于uwsgi和nginx在同一主机上情形
# Nginx配置中uwsgi_pass应指向同一socket文件
socket=%(project).sock


# 选项2，使用TCP socket与nginx通信
# Nginx配置中uwsgi_pass应指向uWSGI服务器IP和端口
# socket=0.0.0.0:8000 或则 socket=:8000


# 选项3，使用http协议与nginx通信
# Nginx配置中proxy_pass应指向uWSGI服务器一IP和端口
# http=0.0.0.0:8001

# 进程文件
pidfile=%(project).pid

# 以后台守护进程运行，并将log日志存于temp文件夹。
# 未使用 systemd 时日志文件，会一直保持在后台，使用 docker 应该使用 logto
daemonize=%(project).log 

# 使用 systemd 时 日志文件
# logto=%(project).log


# 服务停止时，自动移除unix socket和pid文件
vacuum=True

# 为每个工作进程设置请求数的上限。当处理的请求总数超过这个量，进程回收重启。
max-requests=5000

# 当一个请求花费的时间超过这个时间，那么这个请求都会被丢弃。
harakiri=60

#当一个请求被harakiri杀掉会输出一条日志
harakiri-verbose=true


# uWsgi默认的buffersize为4096，如果请求数据超过这个量会报错。这里设置为64k
buffer-size=65536


# 如果http请求体的大小超过指定的限制，打开http body缓冲，这里为64k
post-buffering=65536


#开启内存使用情况报告
memory-report=true


#设置平滑的重启（直到处理完接收到的请求）的长等待时间(秒)
reload-mercy=10


#设置工作进程使用虚拟内存超过多少MB就回收重启
reload-on-as=1024


